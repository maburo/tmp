!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){const n=r(1);const o=function(){const e=document.createElement("canvas");document.body.appendChild(e);const t=e.getContext("webgl");return t.clearColor(0,0,0,1),t}(),i=n(o,"\nattribute vec4 aVertexPosition;\n\nvoid main() {\n  gl_Position = aVertexPosition;\n}","\nvoid main() {\n  gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}",[0,0,0,.5,.7,0]);requestAnimationFrame(function e(){o.canvas.height=o.canvas.clientHeight,o.canvas.width=o.canvas.clientWidth,o.viewport(0,0,o.canvas.width,o.canvas.height),o.enable(o.DEPTH_TEST),o.depthFunc(o.LEQUAL),o.clear(o.COLOR_BUFFER_BIT|o.DEPTH_BUFFER_BIT),i.draw(),requestAnimationFrame(e)})},function(e,t){function r(e,t,r){const n=e.createShader(t);return e.shaderSource(n,r),e.compileShader(n),e.getShaderParameter(n,e.COMPILE_STATUS)?n:(console.error("Error compiling shader",e.getShaderInfoLog(n)),void e.deleteShader(n))}e.exports=class{constructor(e,t,n,o){this.gl=e,this.program=function(e,t,n){const o=e.createProgram();return e.attachShader(o,r(e,e.VERTEX_SHADER,t)),e.attachShader(o,r(e,e.FRAGMENT_SHADER,n)),e.linkProgram(o),e.getProgramParameter(o,e.LINK_STATUS)||(console.error("Unable to init shader",e.getProgramInfoLog(o)),e.deleteProgram(o)),o}(e,t,n),this.aVertexPosition=e.getAttribLocation(this.program,"aVertexPosition"),this.positionBuffer=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,new Float32Array(o),e.STATIC_DRAW)}draw(){this.gl.enableVertexAttribArray(this.aVertexPosition),this.gl.bindBuffer(gl.ARRAY_BUFFER,this.positionBuffer),this.gl.vertexAttribPointer(this.aVertexPosition,2,this.gl.FLOAT,!1,0,0),this.gl.useProgram(this.program),this.gl.drawArrays(gl.TRIANGLES,0,3)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,